#if !defined(__TEST_H__)
#define __TEST_H__

#include <stdint.h>

//#define TEST1CONFIG
//#define SEND_RECEIVE
//#define TEST_FTDI
//#define TEST_LORA_SERIALDEBUG
//#define OLD_TEST_FTDI

//#define TESTE_FIMAFIM
//#define TESTE_ABNT
//#define TEST_SEMRTOS
//#define TEST_SERIALNATIVA
//#define TESTE_RS232
//#define SEMLORA
//#define USB_DEBUG
//#define TESTE_SERIAL3
//#define TEST_CONSUMO
//#define TESTE_PWRFAIL
#define DEBUG_SERIAL3
#define DEBUG_LORA
//#define TEST_LORA_CLASS_C
#define TESTE_INTEGRACAO

#define SECRET_APP_EUI "70B3D57ED0012777"
//#define SECRET_APP_KEY "AECBAEA6EB06A316413E7B2244DFBF00" //AppKey para servidor interno Multitech / Node-RED
//#define SECRET_APP_KEY "0e4c5961ba6e2b116fda7dd14382246f" //Appkey para servidor local, placa avulsa (EUI :7a0b), LoRaServer
//#define SECRET_APP_KEY "7818c354f78b690d30145963e87b2938" //Chave para o EUI: a8610a3432266f05 (servidor interno LoRaServer)
//#define SECRET_APP_KEY "27ca801eadbd2b30b52c64581b4b37a4" // chave para o EUI: a8610a3039476906 (placa com interface debugger ATMEL-ICE)
#define SECRET_APP_KEY "c11b6c1d71a26eca4dbb1cf7e0722882" // chave para o EUI: a8610a303923750b (placa nao montada na placa mae)

#define ABP_DEVADDR    "000f780f"
#define ABP_NWKSKEY     "8105c97abfe43b24f378376f7a1b8132"
#define ABP_APPSKEY     "91f5160e510f18500927b43883b96269"

#define MIN_LORA_INTERVAL   240000L //milissegundos
#define LORA_RESP_INTERVAL  1000

#define DEBUG_BAUD 9600

#define PIN_TESTE_PWRFAIL   PIN_A1
#define PIN_TEST_ISR        PIN_A2
#define PIN_LEITURA_VIN     3
#define PIN_POWER_FAILURE   7

#define MIN_ABNT_SEND_INTERVAL  12000L
#define T_COMANDO 10000L
#define T_WAITUSB 5000L

#define SLEEP_PERIOD    5000

 //------------------- Definções relativas ao protocolo ABNT ------------------------
#define LEN_CMD     66
#define LEN_RES     258

#define CMD_11   //{
#define CMD_13   {0x13, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x8C}
#define CMD_14   {0x14, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0xDE}
#define CMD_21   {0x21, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x39}
#define CMD_23   {0x23, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x98}
#define CMD_25   {0x25, 0x00, 0x11, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x06}
#define CMD_28   {0x28, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xCF}

#define MAX_SEND 64
#define SIZE_RECV 64
//-----------------------------------------------------------------------------------

typedef struct secret_keys
{
    char appeui[16];
    char appkey[32];
} __attribute__ ((packed)) secret_keys_t;
extern secret_keys_t localKeys;

#endif
